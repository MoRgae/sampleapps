//-----------------------------------------------------------------------------
// <auto-generated>
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated.
//
//   For more information, see: http://go.microsoft.com/fwlink/?LinkID=623246
// </auto-generated>
//-----------------------------------------------------------------------------
#pragma once

using namespace concurrency;

namespace org { namespace OpenT2T { namespace Sample { namespace SuperPopular { namespace TemperatureSensor {

ref class TemperatureSensorConsumer;

public ref class TemperatureSensorGetCurrentTemperatureResult sealed
{
public:
    property int32 Status
    {
        int32 get() { return m_status; }
    internal:
        void set(_In_ int32 value) { m_status = value; }
    }

    property double Temp
    {
        double get() { return m_interfaceMemberTemp; }
    internal:
        void set(_In_ double value) { m_interfaceMemberTemp = value; }
    }
    
    static TemperatureSensorGetCurrentTemperatureResult^ CreateSuccessResult(_In_ double interfaceMemberTemp)
    {
        auto result = ref new TemperatureSensorGetCurrentTemperatureResult();
        result->Status = Windows::Devices::AllJoyn::AllJoynStatus::Ok;
        result->Temp = interfaceMemberTemp;
        result->m_creationContext = Concurrency::task_continuation_context::use_current();
        return result;
    }
    
    static TemperatureSensorGetCurrentTemperatureResult^ CreateFailureResult(_In_ int32 status)
    {
        auto result = ref new TemperatureSensorGetCurrentTemperatureResult();
        result->Status = status;
        return result;
    }
internal:
    Concurrency::task_continuation_context m_creationContext = Concurrency::task_continuation_context::use_default();

private:
    int32 m_status;
    double m_interfaceMemberTemp;
};

public ref class TemperatureSensorGetTemperatureTrendResult sealed
{
public:
    property int32 Status
    {
        int32 get() { return m_status; }
    internal:
        void set(_In_ int32 value) { m_status = value; }
    }

    property double Temp
    {
        double get() { return m_interfaceMemberTemp; }
    internal:
        void set(_In_ double value) { m_interfaceMemberTemp = value; }
    }
    
    static TemperatureSensorGetTemperatureTrendResult^ CreateSuccessResult(_In_ double interfaceMemberTemp)
    {
        auto result = ref new TemperatureSensorGetTemperatureTrendResult();
        result->Status = Windows::Devices::AllJoyn::AllJoynStatus::Ok;
        result->Temp = interfaceMemberTemp;
        result->m_creationContext = Concurrency::task_continuation_context::use_current();
        return result;
    }
    
    static TemperatureSensorGetTemperatureTrendResult^ CreateFailureResult(_In_ int32 status)
    {
        auto result = ref new TemperatureSensorGetTemperatureTrendResult();
        result->Status = status;
        return result;
    }
internal:
    Concurrency::task_continuation_context m_creationContext = Concurrency::task_continuation_context::use_default();

private:
    int32 m_status;
    double m_interfaceMemberTemp;
};

public ref class TemperatureSensorJoinSessionResult sealed
{
public:
    property int32 Status
    {
        int32 get() { return m_status; }
    internal:
        void set(_In_ int32 value) { m_status = value; }
    }

    property TemperatureSensorConsumer^ Consumer
    {
        TemperatureSensorConsumer^ get() { return m_consumer; }
    internal:
        void set(_In_ TemperatureSensorConsumer^ value) { m_consumer = value; }
    };

private:
    int32 m_status;
    TemperatureSensorConsumer^ m_consumer;
};

} } } } } 
