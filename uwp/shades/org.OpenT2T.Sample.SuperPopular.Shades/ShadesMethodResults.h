//-----------------------------------------------------------------------------
// <auto-generated>
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated.
//
//   For more information, see: http://go.microsoft.com/fwlink/?LinkID=623246
// </auto-generated>
//-----------------------------------------------------------------------------
#pragma once

using namespace concurrency;

namespace org { namespace OpenT2T { namespace Sample { namespace SuperPopular { namespace Shades {

ref class ShadesConsumer;

public ref class ShadesOpenResult sealed
{
public:
    property int32 Status
    {
        int32 get() { return m_status; }
    internal:
        void set(_In_ int32 value) { m_status = value; }
    }

    
    static ShadesOpenResult^ CreateSuccessResult()
    {
        auto result = ref new ShadesOpenResult();
        result->Status = Windows::Devices::AllJoyn::AllJoynStatus::Ok;
        result->m_creationContext = Concurrency::task_continuation_context::use_current();
        return result;
    }
    
    static ShadesOpenResult^ CreateFailureResult(_In_ int32 status)
    {
        auto result = ref new ShadesOpenResult();
        result->Status = status;
        return result;
    }
internal:
    Concurrency::task_continuation_context m_creationContext = Concurrency::task_continuation_context::use_default();

private:
    int32 m_status;
};

public ref class ShadesCloseResult sealed
{
public:
    property int32 Status
    {
        int32 get() { return m_status; }
    internal:
        void set(_In_ int32 value) { m_status = value; }
    }

    
    static ShadesCloseResult^ CreateSuccessResult()
    {
        auto result = ref new ShadesCloseResult();
        result->Status = Windows::Devices::AllJoyn::AllJoynStatus::Ok;
        result->m_creationContext = Concurrency::task_continuation_context::use_current();
        return result;
    }
    
    static ShadesCloseResult^ CreateFailureResult(_In_ int32 status)
    {
        auto result = ref new ShadesCloseResult();
        result->Status = status;
        return result;
    }
internal:
    Concurrency::task_continuation_context m_creationContext = Concurrency::task_continuation_context::use_default();

private:
    int32 m_status;
};

public ref class ShadesJoinSessionResult sealed
{
public:
    property int32 Status
    {
        int32 get() { return m_status; }
    internal:
        void set(_In_ int32 value) { m_status = value; }
    }

    property ShadesConsumer^ Consumer
    {
        ShadesConsumer^ get() { return m_consumer; }
    internal:
        void set(_In_ ShadesConsumer^ value) { m_consumer = value; }
    };

private:
    int32 m_status;
    ShadesConsumer^ m_consumer;
};

} } } } } 
